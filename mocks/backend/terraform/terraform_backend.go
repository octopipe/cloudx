// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	terraform "github.com/octopipe/cloudx/internal/backend/terraform"
	mock "github.com/stretchr/testify/mock"
)

// TerraformBackend is an autogenerated mock type for the TerraformBackend type
type TerraformBackend struct {
	mock.Mock
}

// Apply provides a mock function with given fields: input
func (_m *TerraformBackend) Apply(input terraform.TerraformApplyInput) (terraform.TerraformApplyResult, error) {
	ret := _m.Called(input)

	var r0 terraform.TerraformApplyResult
	var r1 error
	if rf, ok := ret.Get(0).(func(terraform.TerraformApplyInput) (terraform.TerraformApplyResult, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(terraform.TerraformApplyInput) terraform.TerraformApplyResult); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(terraform.TerraformApplyResult)
	}

	if rf, ok := ret.Get(1).(func(terraform.TerraformApplyInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Destroy provides a mock function with given fields: input
func (_m *TerraformBackend) Destroy(input terraform.TerraformDestroyInput) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(terraform.TerraformDestroyInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTerraformBackend creates a new instance of TerraformBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTerraformBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *TerraformBackend {
	mock := &TerraformBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
